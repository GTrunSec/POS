:PROPERTIES:
:ID:       55e5de92-922e-4e91-aa8c-c8121545aac8
:header-args: :noweb tangle :comments noweb :exports both
:PRJ-DIR: ../../units/nixos/nixosProfiles
:END:
#+TITLE: nixosProfiles
#+AUTHOR: GuangTao Zhang
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 2023-10-08 Sun 22:00

- tags :: [[id:50ab7f73-4fae-481b-8987-6e206a9d8f95][homeProfiles]]


* Suites

** cloud

#+begin_src nix :tangle (concat (org-entry-get nil "PRJ-DIR" t) "/cloud.nix")
{
  root,
  omnibus,
  POP,
  flops,
}:
let
  srvosCustom =
    (omnibus.pops.srvos.addExporters [
      (POP.extendPop flops.haumea.pops.exporter (
        self: _super: {
          exports.srvosCustom = self.outputs [
            {
              value = {selfModule}: removeAttrs selfModule ["imports"];
              path = [
                "common"
                "default"
              ];
            }
          ];
        }
      ))
    ]).layouts.srvosCustom;
  presets = root.presets;
in
with presets; {
  default = [
    srvosCustom.common.default
    openssh
    zswap
    {
      services.zswap.zpool = "z3fold";
      boot.tmp.cleanOnBoot = true;
      zramSwap.enable = true;
      documentation.enable = false;
    }
  ];

  contabo = [
    self.default
    contabo
  ];
}
#+end_src



** coding

#+begin_src nix :tangle (concat (org-entry-get nil "PRJ-DIR" t) "/dev.nix")
{ root, self }:
let
  presets = root.presets;
in
with presets; {
  minimal = [ shell.default ];

  default = [
    self.minimal
    self.mathematic
    coding.nickel
    coding.conf
    coding.bash
    coding.d2
    coding.nix
  ];

  coding = [
    self.default
    {
      config.omnibus.coding = {
        bash.lsp = true;
        nickel.lsp = true;
        typst.lsp = true;
        conf.lsp = true;
      };
    }
  ];

  mathematic = [ coding.typst ];
}
#+end_src

** hardware


#+begin_src nix :tangle (concat (org-entry-get nil "PRJ-DIR" t) "/hardware.nix")
{ root, self }:
let
  presets = root.presets;
in
with presets; {
  default = [
    audio.bluetooth
    audio.pipewire
  ];
}
#+end_src
