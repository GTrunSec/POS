:PROPERTIES:
:ID:       f7adb0ad-2cc1-4723-a796-bf608682456a
:header-args: :noweb tangle :comments noweb :exports both
:PRJ-DIR: ../..
:EXP-DIR: ../../examples
:CODE-DIR: ../../src/pops
:END:
#+TITLE: pops-packages
#+AUTHOR: GuangTao Zhang
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 2023-11-19 Sun 16:25


function: ~omnibus.pops.pacakges~ is responsible for loading packages in a tree structure then nixpkgs.callPackage with *path* automatically.

- code

#+begin_src nix :tangle (concat (org-entry-get nil "CODE-DIR" t) "/packages.nix")
{ super, root }:
load:
let
  inherit
    (root.errors.requiredInputs load.inputs "omnibus.pops.packages" [ "nixpkgs" ])
    nixpkgs
  ;
  inherit (nixpkgs) newScope;
  inherit (nixpkgs.lib) makeScope;
in
makeScope newScope (
  selfScope:
  ((super.load load).addLoadExtender {
    load = {
      loader =
        __inputs__: path:
        (selfScope.overrideScope (_: _: { inherit __inputs__; })).callPackage path { };
      transformer = [ (_cursor: dir: if dir ? default then dir.default else dir) ];
    };
  }).addExporters
    [
      (POP.extendPop flops.haumea.pops.exporter (
        self: _super: {
          exports = {
            overlay =
              final: prev:
              (self.layouts.self.addLoadExtender {
                load = {
                  inputs.inputs.nixpkgs = final;
                  loader =
                    __inputs__: path:
                    (__inputs__.inputs.nixpkgs.extend (_: _: { inherit __inputs__; })).callPackage
                      path
                      { };
                };
              }).exports.default;
          };
        }
      ))
    ]
)
#+end_src

- *pops.packages* have an arg named by anti-namespace of *__inputs__* in the scopePackages, that *__inptus__* can pass all args same as haumea.inputs, such as {super,self, ...} => {__inputs__.self, __inputs__.super, inputs.{...} }


** Example

#+begin_src nix :tangle (concat (org-entry-get nil "EXP-DIR" t) "/packages/default.nix")
{
  omnibus,
  inputs,
  self,
}:
omnibus.pops.packages {
  src = ./__fixture;
  inputs = {
    nixpkgs = inputs.nixpkgs.legacyPackages.x86_64-linux;
  };
}
# => out.exports { default = {...}, packages = {...}; }
#+end_src


#+begin_quote
Please note that in Pops, the outputs/results should not be directly printed, but instead, they wll be exported through the exports property under the pop object.
#+end_quote


+ exports

#+begin_src nix

# => default (packageSet)
nix-repl> :p Flake.examples.packages.exports.default
{ hello1 = «derivation /nix/store/kc6j6vssi60h1yn3kafc7v8ywn1j35lp-example-unfree-package-2.0.drv»; hello2 = «derivation /
nix/store/v0qa0lw6jhzcwj68zz939kn8ixmiabnb-example-unfree-package-3.0.drv»; }
# => overlay
nix-repl> :p Flake.examples.packages.exports.overlay
«lambda @ /home/guangtao/Dropbox/omnibus/src/pops/packages.nix:27:15»
#+end_src

  - apply the overlay with nixpkgs
    #+begin_src nix :tangle (concat (org-entry-get nil "EXP-DIR" t) "/packagesOverlay.nix")
{ super, omnibus }:
let
  nixos-23_05 = omnibus.flake.inputs.nixos-23_05;
in
nixos-23_05.legacyPackages.x86_64-linux.extend super.packages.exports.overlay
    #+end_src
